
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import yaspl2.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\006\004" +
    "\000\002\006\003\000\002\012\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\014\005\000\002" +
    "\014\003\000\002\016\005\000\002\016\003\000\002\011" +
    "\012\000\002\017\004\000\002\017\002\000\002\004\004" +
    "\000\002\004\003\000\002\005\007\000\002\020\005\000" +
    "\002\013\003\000\002\013\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\003\000\002\022\003\000\002\021" +
    "\006\000\002\021\005\000\002\021\006\000\002\021\011" +
    "\000\002\021\013\000\002\021\011\000\002\021\011\000" +
    "\002\021\006\000\002\023\005\000\002\023\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\003\000\002\010\004\000\002\010\005\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\004\004\001\002\000\014\005\ufffd\007" +
    "\013\030\016\031\011\032\014\001\002\000\004\002\006" +
    "\001\002\000\004\002\000\001\002\000\004\005\202\001" +
    "\002\000\014\005\ufffd\007\013\030\016\031\011\032\014" +
    "\001\002\000\010\006\ufff7\010\ufff7\033\ufff7\001\002\000" +
    "\014\005\ufffd\007\013\030\016\031\011\032\014\001\002" +
    "\000\004\033\024\001\002\000\010\006\ufff8\010\ufff8\033" +
    "\ufff8\001\002\000\004\033\020\001\002\000\010\006\ufff9" +
    "\010\ufff9\033\ufff9\001\002\000\004\006\023\001\002\000" +
    "\012\006\ufff5\010\021\015\ufff5\027\ufff5\001\002\000\004" +
    "\033\020\001\002\000\010\006\ufff6\015\ufff6\027\ufff6\001" +
    "\002\000\040\005\ufffa\007\ufffa\012\ufffa\013\ufffa\020\ufffa" +
    "\024\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\037\ufffa\040\ufffa\053\ufffa\001\002\000\004\012\025" +
    "\001\002\000\012\027\ufff0\030\016\031\011\032\014\001" +
    "\002\000\004\027\031\001\002\000\034\012\ufff0\013\ufff0" +
    "\020\ufff0\024\ufff0\027\ufff0\030\016\031\011\032\014\033" +
    "\ufff0\034\ufff0\037\ufff0\040\ufff0\053\ufff0\001\002\000\026" +
    "\012\ufff1\013\ufff1\020\ufff1\024\ufff1\027\ufff1\033\ufff1\034" +
    "\ufff1\037\ufff1\040\ufff1\053\ufff1\001\002\000\004\011\032" +
    "\001\002\000\010\030\016\031\011\032\014\001\002\000" +
    "\012\013\uffee\030\016\031\011\032\014\001\002\000\004" +
    "\013\035\001\002\000\032\012\ufff0\013\ufff0\020\ufff0\024" +
    "\ufff0\030\016\031\011\032\014\033\ufff0\034\ufff0\037\ufff0" +
    "\040\ufff0\053\ufff0\001\002\000\014\005\ufff2\007\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\001\002\000\024\012\050\013\042" +
    "\020\052\024\041\033\056\034\047\037\055\040\040\053" +
    "\044\001\002\000\014\012\050\033\076\037\055\040\040" +
    "\053\044\001\002\000\004\012\170\001\002\000\024\012" +
    "\050\013\042\020\052\024\041\033\056\034\047\037\055" +
    "\040\040\053\044\001\002\000\030\002\ufffb\012\050\013" +
    "\042\014\ufffb\020\052\024\041\033\056\034\047\037\055" +
    "\040\040\053\044\001\002\000\042\006\uffdb\010\uffdb\011" +
    "\uffdb\016\uffdb\027\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\001\002\000\016\010\163\016\uffe7\040\106\041\120" +
    "\042\113\043\117\001\002\000\030\002\uffea\012\uffea\013" +
    "\uffea\014\uffea\020\uffea\024\uffea\033\uffea\034\uffea\037\uffea" +
    "\040\uffea\053\uffea\001\002\000\006\010\161\016\uffe6\001" +
    "\002\000\014\012\050\033\076\037\055\040\040\053\044" +
    "\001\002\000\004\014\156\001\002\000\004\012\145\001" +
    "\002\000\004\016\143\001\002\000\030\002\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\020\uffeb\024\uffeb\033\uffeb\034\uffeb\037" +
    "\uffeb\040\uffeb\053\uffeb\001\002\000\042\006\uffda\010\uffda" +
    "\011\uffda\016\uffda\027\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\001\002\000\024\010\uffd8\012\066\015\ufff5\016" +
    "\uffd8\017\067\040\uffd8\041\uffd8\042\uffd8\043\uffd8\001\002" +
    "\000\004\015\060\001\002\000\010\030\016\031\011\032" +
    "\014\001\002\000\004\006\065\001\002\000\006\006\ufff3" +
    "\010\063\001\002\000\010\030\016\031\011\032\014\001" +
    "\002\000\004\006\ufff4\001\002\000\030\002\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\020\uffe5\024\uffe5\033\uffe5\034\uffe5\037" +
    "\uffe5\040\uffe5\053\uffe5\001\002\000\014\012\050\033\076" +
    "\037\055\040\040\053\044\001\002\000\022\012\072\026" +
    "\075\033\076\035\071\036\074\037\055\040\040\053\044" +
    "\001\002\000\032\006\132\040\106\041\120\042\113\043" +
    "\117\044\101\045\103\046\116\047\110\050\114\051\115" +
    "\052\121\001\002\000\012\006\uffd1\027\uffd1\044\uffd1\045" +
    "\uffd1\001\002\000\022\012\072\026\075\033\076\035\071" +
    "\036\074\037\055\040\040\053\044\001\002\000\010\006" +
    "\125\044\101\045\103\001\002\000\012\006\uffd0\027\uffd0" +
    "\044\uffd0\045\uffd0\001\002\000\022\012\072\026\075\033" +
    "\076\035\071\036\074\037\055\040\040\053\044\001\002" +
    "\000\042\006\uffd8\010\uffd8\011\uffd8\016\uffd8\027\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\001\002\000\034\006" +
    "\uffcd\027\uffcd\040\106\041\120\042\113\043\117\044\101" +
    "\045\103\046\116\047\110\050\114\051\115\052\121\001" +
    "\002\000\012\006\uffce\027\uffce\044\101\045\103\001\002" +
    "\000\022\012\uffc9\026\uffc9\033\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\053\uffc9\001\002\000\022\012\072\026\075" +
    "\033\076\035\071\036\074\037\055\040\040\053\044\001" +
    "\002\000\022\012\uffc8\026\uffc8\033\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\053\uffc8\001\002\000\030\040\106\041" +
    "\120\042\113\043\117\044\101\045\103\046\116\047\110" +
    "\050\114\051\115\052\121\001\002\000\012\006\uffcf\027" +
    "\uffcf\044\101\045\103\001\002\000\014\012\uffd4\033\uffd4" +
    "\037\uffd4\040\uffd4\053\uffd4\001\002\000\014\012\050\033" +
    "\076\037\055\040\040\053\044\001\002\000\014\012\uffc6" +
    "\033\uffc6\037\uffc6\040\uffc6\053\uffc6\001\002\000\014\012" +
    "\050\033\076\037\055\040\040\053\044\001\002\000\014" +
    "\012\050\033\076\037\055\040\040\053\044\001\002\000" +
    "\014\012\uffd5\033\uffd5\037\uffd5\040\uffd5\053\uffd5\001\002" +
    "\000\014\012\uffc3\033\uffc3\037\uffc3\040\uffc3\053\uffc3\001" +
    "\002\000\014\012\uffc4\033\uffc4\037\uffc4\040\uffc4\053\uffc4" +
    "\001\002\000\014\012\uffc7\033\uffc7\037\uffc7\040\uffc7\053" +
    "\uffc7\001\002\000\014\012\uffd2\033\uffd2\037\uffd2\040\uffd2" +
    "\053\uffd2\001\002\000\014\012\uffd3\033\uffd3\037\uffd3\040" +
    "\uffd3\053\uffd3\001\002\000\014\012\uffc5\033\uffc5\037\uffc5" +
    "\040\uffc5\053\uffc5\001\002\000\022\006\uffcc\027\uffcc\040" +
    "\106\041\120\042\113\043\117\044\uffcc\045\uffcc\001\002" +
    "\000\042\006\uffd9\010\uffd9\011\uffd9\016\uffd9\027\uffd9\040" +
    "\106\041\120\042\113\043\117\044\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\001\002\000\022\006" +
    "\uffca\027\uffca\040\106\041\120\042\113\043\117\044\uffca" +
    "\045\uffca\001\002\000\030\002\uffde\012\uffde\013\uffde\014" +
    "\uffde\020\uffde\024\uffde\033\uffde\034\uffde\037\uffde\040\uffde" +
    "\053\uffde\001\002\000\032\027\131\040\106\041\120\042" +
    "\113\043\117\044\101\045\103\046\116\047\110\050\114" +
    "\051\115\052\121\001\002\000\010\027\130\044\101\045" +
    "\103\001\002\000\012\006\uffcb\027\uffcb\044\uffcb\045\uffcb" +
    "\001\002\000\042\006\uffd6\010\uffd6\011\uffd6\016\uffd6\027" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\001\002\000" +
    "\030\002\uffe3\012\uffe3\013\uffe3\014\uffe3\020\uffe3\024\uffe3" +
    "\033\uffe3\034\uffe3\037\uffe3\040\uffe3\053\uffe3\001\002\000" +
    "\004\011\137\001\002\000\016\010\135\011\uffdc\040\106" +
    "\041\120\042\113\043\117\001\002\000\014\012\050\033" +
    "\076\037\055\040\040\053\044\001\002\000\004\011\uffdd" +
    "\001\002\000\004\033\020\001\002\000\004\027\141\001" +
    "\002\000\004\006\142\001\002\000\030\002\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\020\uffe2\024\uffe2\033\uffe2\034\uffe2\037" +
    "\uffe2\040\uffe2\053\uffe2\001\002\000\004\006\144\001\002" +
    "\000\030\002\uffe4\012\uffe4\013\uffe4\014\uffe4\020\uffe4\024" +
    "\uffe4\033\uffe4\034\uffe4\037\uffe4\040\uffe4\053\uffe4\001\002" +
    "\000\022\012\072\026\075\033\076\035\071\036\074\037" +
    "\055\040\040\053\044\001\002\000\010\027\147\044\101" +
    "\045\103\001\002\000\004\021\150\001\002\000\004\013" +
    "\042\001\002\000\006\006\153\023\152\001\002\000\004" +
    "\013\042\001\002\000\030\002\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\020\uffe0\024\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0" +
    "\053\uffe0\001\002\000\004\006\155\001\002\000\030\002" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\020\uffe1\024\uffe1\033\uffe1" +
    "\034\uffe1\037\uffe1\040\uffe1\053\uffe1\001\002\000\004\006" +
    "\157\001\002\000\014\005\uffed\007\uffed\030\uffed\031\uffed" +
    "\032\uffed\001\002\000\014\027\131\040\106\041\120\042" +
    "\113\043\117\001\002\000\016\012\050\033\076\034\047" +
    "\037\055\040\040\053\044\001\002\000\004\016\uffe8\001" +
    "\002\000\016\012\050\033\076\034\047\037\055\040\040" +
    "\053\044\001\002\000\004\016\uffe9\001\002\000\006\002" +
    "\ufffc\014\ufffc\001\002\000\004\014\167\001\002\000\034" +
    "\002\uffec\006\uffec\012\uffec\013\uffec\014\uffec\020\uffec\023" +
    "\uffec\024\uffec\033\uffec\034\uffec\037\uffec\040\uffec\053\uffec" +
    "\001\002\000\022\012\072\026\075\033\076\035\071\036" +
    "\074\037\055\040\040\053\044\001\002\000\010\027\172" +
    "\044\101\045\103\001\002\000\004\025\173\001\002\000" +
    "\004\013\042\001\002\000\004\006\175\001\002\000\030" +
    "\002\uffdf\012\uffdf\013\uffdf\014\uffdf\020\uffdf\024\uffdf\033" +
    "\uffdf\034\uffdf\037\uffdf\040\uffdf\053\uffdf\001\002\000\042" +
    "\006\uffd7\010\uffd7\011\uffd7\016\uffd7\027\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\001\002\000\004\013\uffef\001" +
    "\002\000\004\005\uffff\001\002\000\004\005\ufffe\001\002" +
    "\000\024\012\050\013\042\020\052\024\041\033\056\034" +
    "\047\037\055\040\040\053\044\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\002\004\001\001\000\012\003\006\011" +
    "\007\012\011\015\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\200\011\007\012" +
    "\011\015\014\001\001\000\002\001\001\000\012\003\177" +
    "\011\007\012\011\015\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\026\015\014\017\025\001\001\000\002\001" +
    "\001\000\010\012\026\015\014\017\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\033\012\032\015" +
    "\014\001\001\000\010\004\176\012\032\015\014\001\001" +
    "\000\004\005\035\001\001\000\010\012\026\015\014\017" +
    "\036\001\001\000\002\001\001\000\020\006\050\010\044" +
    "\013\042\014\056\020\053\021\045\022\052\001\001\000" +
    "\004\010\175\001\001\000\002\001\001\000\020\006\165" +
    "\010\044\013\042\014\056\020\053\021\045\022\052\001" +
    "\001\000\020\006\164\010\044\013\042\014\056\020\053" +
    "\021\045\022\052\001\001\000\002\001\001\000\004\024" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\061\016\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\061" +
    "\016\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\133\023\132\001\001\000\006\007\072\010\067" +
    "\001\001\000\010\024\110\025\106\026\111\001\001\000" +
    "\002\001\001\000\006\007\126\010\125\001\001\000\004" +
    "\025\101\001\001\000\002\001\001\000\006\007\077\010" +
    "\076\001\001\000\002\001\001\000\010\024\110\025\106" +
    "\026\111\001\001\000\004\025\101\001\001\000\002\001" +
    "\001\000\006\007\104\010\103\001\001\000\002\001\001" +
    "\000\010\024\110\025\106\026\111\001\001\000\004\025" +
    "\101\001\001\000\002\001\001\000\004\010\123\001\001" +
    "\000\002\001\001\000\004\010\122\001\001\000\004\010" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\110\001\001\000\004" +
    "\024\110\001\001\000\004\024\110\001\001\000\002\001" +
    "\001\000\010\024\110\025\106\026\111\001\001\000\004" +
    "\025\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\110\001\001" +
    "\000\006\010\133\023\135\001\001\000\002\001\001\000" +
    "\004\014\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\145\010\103\001\001\000\004\025\101\001\001" +
    "\000\002\001\001\000\004\020\150\001\001\000\002\001" +
    "\001\000\004\020\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\110\001\001\000\006\010\044\022\161" +
    "\001\001\000\002\001\001\000\006\010\044\022\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\170\010\103\001\001\000" +
    "\004\025\101\001\001\000\002\001\001\000\004\020\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\202\010\044\013\042\014\056\020" +
    "\053\021\045\022\052\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma1 ::= HEAD Decls1 START Statements 
            {
              Programma RESULT =null;
		Location refDxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refDxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Programma.Decls refD = (Programma.Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location refStatementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refStatementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Stat> refStatements = (List<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG0
 RESULT=Programma.programmaOP(refD,refStatements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programma1",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma1 EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Programma start_val = (Programma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls1 ::= Var_decl1 Decls1 
            {
              Programma.Decls RESULT =null;
		Location refVarDxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refVarDxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Var_decl.VarDeclOP refVarD = (Var_decl.VarDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location refDxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refDxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Programma.Decls refD = (Programma.Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG1
 refD.addVars(refVarD); RESULT=refD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls1 ::= Def_decl1 Decls1 
            {
              Programma.Decls RESULT =null;
		Location refDefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refDefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Def_decl refDef = (Def_decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location refD1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refD1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Programma.Decls refD1 = (Programma.Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG2
refD1.addDecl(refDef);  RESULT=refD1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls1 ::= 
            {
              Programma.Decls RESULT =null;
		//@@CUPDBG3
RESULT=Programma.getDecls();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statements ::= Stat1 Statements 
            {
              List<Stat> RESULT =null;
		Location refStatxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refStatxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Stat refStat = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location refStatementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refStatementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Stat> refStatements = (List<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
 refStatements.add(refStat); RESULT=refStatements; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statements ::= Stat1 
            {
              List<Stat> RESULT =null;
		Location refStat1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refStat1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stat refStat1 = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
  RESULT=new ArrayList<Stat>(); RESULT.add(refStat1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Var_decl1 ::= Type1 Vars SEMI 
            {
              Var_decl.VarDeclOP RESULT =null;
		Location refTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr.Type refType = (Expr.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location refVarsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refVarsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Var_decl.VarOp refVars = (Var_decl.VarOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG6
 RESULT=Var_decl.getVarDeclOP(refType,refVars); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decl1",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type1 ::= INT 
            {
              Expr.Type RESULT =null;
		Location interoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location interoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String intero = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
RESULT=Expr.makeType(intero);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type1 ::= BOOL 
            {
              Expr.Type RESULT =null;
		Location booleanoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location booleanoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String booleano = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
RESULT=Expr.makeType(booleano);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type1 ::= DOUBLE 
            {
              Expr.Type RESULT =null;
		Location doublesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location doublesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String doubles = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
RESULT=Expr.makeType(doubles);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Vars ::= NAME COMMA Vars 
            {
              Var_decl.VarOp RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location refVxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refVxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Var_decl.VarOp refV = (Var_decl.VarOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 Expr.Identifier c=Expr.ident(id);  refV.addIdentifier(c); RESULT=refV; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Vars ::= NAME 
            {
              Var_decl.VarOp RESULT =null;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 RESULT=Var_decl.makeVarOP(); Expr.Identifier c=Expr.ident(id2); RESULT.addIdentifier(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Types ::= Type1 COMMA Types 
            {
              List<Expr.Type> RESULT =null;
		Location refType1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refType1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr.Type refType1 = (Expr.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location refTypes1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refTypes1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expr.Type> refTypes1 = (List<Expr.Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
 RESULT=refTypes1; refTypes1.add(refType1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Types ::= Type1 
            {
              List<Expr.Type> RESULT =null;
		Location refType2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refType2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr.Type refType2 = (Expr.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
 RESULT=new ArrayList<Expr.Type>(); RESULT.add(refType2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Def_decl1 ::= DEF NAME LPAR Var_decls RPAR COLON Par_decls Bodys 
            {
              Def_decl RESULT =null;
		Location idNomeDefxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location idNomeDefxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String idNomeDef = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location refVarDecls1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location refVarDecls1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<Var_decl> refVarDecls1 = (List<Var_decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location refParxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refParxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Par_decl> refPar = (List<Par_decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location refBodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refBodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Body refBody = (Body)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14

            Expr.Identifier d=Expr.ident(idNomeDef);   RESULT=Def_decl.makeDef_decl(d,refVarDecls1,refPar,refBody); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_decl1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_decls ::= Var_decl1 Var_decls 
            {
              List<Var_decl> RESULT =null;
		Location refVarDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refVarDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Var_decl.VarDeclOP refVarDecl = (Var_decl.VarDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location refVarDECLSxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refVarDECLSxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Var_decl> refVarDECLS = (List<Var_decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 refVarDECLS.add(refVarDecl); RESULT=refVarDECLS;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Var_decls ::= 
            {
              List<Var_decl> RESULT =null;
		//@@CUPDBG16
RESULT=new ArrayList<Var_decl>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Par_decls ::= Var_decl1 Par_decls 
            {
              List<Par_decl> RESULT =null;
		Location refVardecl1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refVardecl1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Var_decl.VarDeclOP refVardecl1 = (Var_decl.VarDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location refPardecls1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refPardecls1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Par_decl> refPardecls1 = (List<Par_decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 Par_decl p=Par_decl.pardeclOP(refVardecl1.getType(),refVardecl1.getVarOp());
                                                               refPardecls1.add(p); 
                                                               RESULT=refPardecls1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Par_decls ::= Var_decl1 
            {
              List<Par_decl> RESULT =null;
		Location refVardecl2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refVardecl2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Var_decl.VarDeclOP refVardecl2 = (Var_decl.VarDeclOP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 RESULT=new ArrayList<Par_decl>(); 
                                       Par_decl p=Par_decl.pardeclOP(refVardecl2.getType(),refVardecl2.getVarOp());
                                       RESULT.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Bodys ::= LGPAR Var_decls Statements RGPAR SEMI 
            {
              Body RESULT =null;
		Location refVarDecls1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location refVarDecls1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<Var_decl> refVarDecls1 = (List<Var_decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location refStatements1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refStatements1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Stat> refStatements1 = (List<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG19
RESULT=Body.bodyOP(refVarDecls1,refStatements1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bodys",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Comp_stat ::= LGPAR Statements RGPAR 
            {
              Stat RESULT =null;
		Location refStatCompxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refStatCompxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Stat> refStatComp = (List<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG20
 RESULT=Stat.compStat(refStatComp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comp_stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stat1 ::= Comp_stat 
            {
              Stat RESULT =null;
		Location refCompStatxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refCompStatxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stat refCompStat = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
 RESULT=refCompStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat1",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stat1 ::= Simple_stat 
            {
              Stat RESULT =null;
		Location refSimpleStatxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refSimpleStatxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stat refSimpleStat = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
RESULT=refSimpleStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat1",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Out_values ::= Expr1 COMMA Out_values 
            {
              List<Expr> RESULT =null;
		Location refE1_Oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refE1_Oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr refE1_O = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location refO1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refO1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expr> refO1 = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
RESULT=refO1; refO1.add(refE1_O);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Out_values ::= STRING_CONST COMMA Out_values 
            {
              List<Expr> RESULT =null;
		Location stringa1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stringa1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String stringa1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location refO2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refO2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expr> refO2 = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 RESULT=refO2; Expr str=Expr.makeStringConst(stringa1); refO2.add(str);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Out_values ::= Expr1 
            {
              List<Expr> RESULT =null;
		Location refE2_0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refE2_0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr refE2_0 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
RESULT=new ArrayList<Expr>(); RESULT.add(refE2_0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Out_values ::= STRING_CONST 
            {
              List<Expr> RESULT =null;
		Location stringa2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stringa2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String stringa2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 RESULT=new ArrayList<Expr>(); Expr str=Expr.makeStringConst(stringa2); RESULT.add(str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Simple_stat ::= Vars READ Types SEMI 
            {
              Stat RESULT =null;
		Location refVarsSxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location refVarsSxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Var_decl.VarOp refVarsS = (Var_decl.VarOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location refTypesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refTypesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expr.Type> refTypes = (List<Expr.Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG27
RESULT=Stat.makeRead(refVarsS.getID(),refTypes);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Simple_stat ::= Out_values WRITE SEMI 
            {
              Stat RESULT =null;
		Location refOutValuesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refOutValuesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expr> refOutValues = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG28
 RESULT=Stat.writeOP1(refOutValues); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Simple_stat ::= NAME ASSIGN Expr1 SEMI 
            {
              Stat RESULT =null;
		Location idnomeS1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idnomeS1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String idnomeS1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location refE1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refE1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expr refE1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG29
RESULT=Stat.assign(idnomeS1,refE1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Simple_stat ::= NAME LPAR Exprs COLON Vars RPAR SEMI 
            {
              Stat RESULT =null;
		Location idnomeS2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location idnomeS2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String idnomeS2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location refE2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location refE2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<Expr> refE2 = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location refVarsS_Sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refVarsS_Sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Var_decl.VarOp refVarsS_S = (Var_decl.VarOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG30
 RESULT=Stat.call(idnomeS2,refE2,refVarsS_S.getID());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Simple_stat ::= IF LPAR Bool_expr1 RPAR THEN Comp_stat ELSE Comp_stat SEMI 
            {
              Stat RESULT =null;
		Location refBool1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location refBool1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Bool_expr refBool1 = (Bool_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location refComp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location refComp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Stat refComp1 = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Stat stmt = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG31
 RESULT=Stat.ifThenElse(refBool1,refComp1,stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Simple_stat ::= IF LPAR Bool_expr1 RPAR THEN Comp_stat SEMI 
            {
              Stat RESULT =null;
		Location refBool2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location refBool2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Bool_expr refBool2 = (Bool_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location refComp3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refComp3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Stat refComp3 = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG32
 RESULT=Stat.ifThen(refBool2,refComp3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Simple_stat ::= WHILE LPAR Bool_expr1 RPAR DO Comp_stat SEMI 
            {
              Stat RESULT =null;
		Location refBool3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location refBool3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Bool_expr refBool3 = (Bool_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location refComp4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refComp4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Stat refComp4 = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG33
 RESULT=Stat.loopWhile(refBool3,refComp4);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Simple_stat ::= NAME ASSIGN Bool_expr1 SEMI 
            {
              Stat RESULT =null;
		Location id8xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location id8xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id8 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location b1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location b1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Bool_expr b1 = (Bool_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG34
 RESULT=Stat.assignBool(id8,b1);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exprs ::= Expr1 COMMA Exprs 
            {
              List<Expr> RESULT =null;
		Location refExpr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refExpr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr refExpr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location refExprs2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refExprs2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expr> refExprs2 = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35
 RESULT=refExprs2;refExprs2.add(refExpr1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exprs ::= Expr1 
            {
              List<Expr> RESULT =null;
		Location refExpr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refExpr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr refExpr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
 RESULT=new ArrayList<Expr>(); RESULT.add(refExpr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr1 ::= INT_CONST 
            {
              Expr RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
RESULT=Expr.intconst(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr1 ::= DOUBLE_CONST 
            {
              Expr RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
RESULT=Expr.doubleconst(d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr1 ::= Expr1 Arith_op Expr1 
            {
              Expr RESULT =null;
		Location refE_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refE_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr refE_1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location refAr_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refAr_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer refAr_op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location refE_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refE_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr refE_2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39
 RESULT=Expr.makeExprArith(refE_1,refAr_op,refE_2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr1 ::= NAME 
            {
              Expr RESULT =null;
		Location idExleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idExright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String idE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40
 RESULT=Expr.ident(idE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr1 ::= MINUS Expr1 
            {
              Expr RESULT =null;
		Location refE_3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refE_3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr refE_3 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
RESULT=Expr.unop(refE_3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr1 ::= LPAR Expr1 RPAR 
            {
              Expr RESULT =null;
		Location refE_4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refE_4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expr refE_4 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG42
 RESULT=Expr.priority(refE_4);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Arith_op ::= PLUS 
            {
              Integer RESULT =null;
		Location plusxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plusxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer plus = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG43
RESULT=plus;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Arith_op ::= MINUS 
            {
              Integer RESULT =null;
		Location minusxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location minusxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer minus = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
RESULT=minus;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arith_op ::= TIMES 
            {
              Integer RESULT =null;
		Location timesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location timesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer times = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45
RESULT=times;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Arith_op ::= DIV 
            {
              Integer RESULT =null;
		Location divxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location divxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer div = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46
RESULT=div;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Bool_expr1 ::= TRUE 
            {
              Bool_expr RESULT =null;
		Location val_truexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location val_truexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean val_true = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47
 RESULT=Bool_expr.boolConst(val_true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bool_expr1 ::= FALSE 
            {
              Bool_expr RESULT =null;
		Location false_truexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location false_truexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean false_true = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG48
 RESULT=Bool_expr.boolConst(false_true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bool_expr1 ::= Bool_expr1 Bool_op Bool_expr1 
            {
              Bool_expr RESULT =null;
		Location refBool1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refBool1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Bool_expr refBool1 = (Bool_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ref_BoolOPxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ref_BoolOPxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer ref_BoolOP = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location refBool2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refBool2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Bool_expr refBool2 = (Bool_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49
 RESULT=Bool_expr.binop(refBool1,ref_BoolOP,refBool2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bool_expr1 ::= NOT Bool_expr1 
            {
              Bool_expr RESULT =null;
		Location refBool3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refBool3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Bool_expr refBool3 = (Bool_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
RESULT=Bool_expr.unop(refBool3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool_expr1 ::= NOT Expr1 
            {
              Bool_expr RESULT =null;
		Location refExxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refExxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr refEx = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 RESULT=Bool_expr.unop(refEx); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool_expr1 ::= Expr1 Rel_op Expr1 
            {
              Bool_expr RESULT =null;
		Location refE_b1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location refE_b1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr refE_b1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location refE_RELOPxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refE_RELOPxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer refE_RELOP = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location refE_b2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location refE_b2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr refE_b2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
RESULT=Bool_expr.relop(refE_b1,refE_RELOP,refE_b2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool_expr1 ::= LPAR Bool_expr1 RPAR 
            {
              Bool_expr RESULT =null;
		Location refBool4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location refBool4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Bool_expr refBool4 = (Bool_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG53
 RESULT=Bool_expr.priority(refBool4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bool_expr1 ::= Expr1 Bool_op Expr1 
            {
              Bool_expr RESULT =null;
		Location expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opBoolxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opBoolxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer opBool = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54
 RESULT=Bool_expr.binExpr(expr1,opBool,expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bool_op ::= AND 
            {
              Integer RESULT =null;
		Location andxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location andxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer and = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG55
RESULT=and;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bool_op ::= OR 
            {
              Integer RESULT =null;
		Location orxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location orxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer or = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG56
RESULT=or;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Rel_op ::= GT 
            {
              Integer RESULT =null;
		Location gtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location gtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer gt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG57
RESULT=gt;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Rel_op ::= GE 
            {
              Integer RESULT =null;
		Location gexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location gexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer ge = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG58
RESULT=ge;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Rel_op ::= LT 
            {
              Integer RESULT =null;
		Location ltxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ltxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer lt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG59
RESULT=lt;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Rel_op ::= LE 
            {
              Integer RESULT =null;
		Location lexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer le = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG60
RESULT=le;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Rel_op ::= EQ 
            {
              Integer RESULT =null;
		Location eqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location eqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer eq = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61
RESULT=eq;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
